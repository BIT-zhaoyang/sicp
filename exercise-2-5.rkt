#lang racket
(define (pow base exp)
  (if (= exp 0)
      1
      (* base (pow base (- exp 1)))))
(define (cons a b)
  (* (pow 2 a) (pow 3 b)))
(define (car x)
  (if (= (remainder x 2) 0)
      (+ 1 (car (/ x 2)))
      0))
(define (cdr x)
  (if (= (remainder x 3) 0)
      (+ 1 (cdr (/ x 3)))
      0))

(car (cons 3 4))
(cdr (cons 3 4))
(newline)
(car (cons 0 4))
(cdr (cons 0 4))
(newline)
(car (cons 1 0))
(cdr (cons 1 0))
(newline)
(car (cons 0 0))
(cdr (cons 0 0))
(newline)
(car (cons 7 2))
(cdr (cons 7 2))